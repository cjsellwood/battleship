{"version":3,"sources":["components/Game.module.css","images/fire.png","components/Ships/Ships.module.css","components/ComputerGrid/ComputerGrid.module.css","components/HumanGrid/HumanGrid.module.css","App.module.css","Factories/Ship.js","Factories/Gameboard.js","Factories/Player.js","components/ComputerGrid/ComputerGrid.js","components/HumanGrid/HumanGrid.js","components/Ships/Ships.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Ship","name","length","damage","Array","fill","sunk","placed","getLength","getName","getDamage","hit","position","isSunk","includes","getPlaced","setPlaced","Gameboard","ships","Carrier","Battleship","Destroyer","Submarine","PatrolBoat","grid","i","push","placeShip","shipObj","orientation","row","column","getGrid","receiveAttack","content","shipName","slice","hitPosition","allSunk","forEach","autoPlaceShips","ship","Math","random","floor","Player","attack","opposition","gameboard","computerAttack","result","computerGrid","props","map","rowIndex","key","className","classes","Row","colIndex","classList","Column","style","backgroundColor","backgroundImage","Fire","backgroundSize","onClick","event","clickBoard","join","humanGrid","drop","Ships","createShips","squares","onMouseDown","dragStart","VerticalShips","currentTurn","console","log","HideShips","Game","state","human","computer","disableRotation","startGame","counter","disableStartBtn","winner","target","textContent","newComputer","getAttribute","setState","setTimeout","newHuman","changeOrientation","autoPlace","handleDragStart","currentTarget","shiftX","clientX","getBoundingClientRect","left","window","innerWidth","shiftY","clientY","top","currentDroppable","Number","shipLength","finalPosition","canDrop","finalElements","onMouseMove","opacity","pageX","pageY","display","elemBelow","document","elementFromPoint","droppableBelow","closest","leaveDroppable","enterDroppable","addEventListener","elem","firstPiece","elements","querySelector","exit","element","onMouseUp","removeEventListener","horizontalDrag","verticalDrag","turnIndicator","this","disabled","winnerStyle","Fragment","Winner","location","reload","Container","Buttons","HideRotate","Label","Grid","HumanGrid","ComputerGrid","Turn","Component","App","Top","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e37b688.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Game_Container__sKSbT\",\"Grid\":\"Game_Grid__Ya4sG\",\"Turn\":\"Game_Turn__36u0M\",\"Label\":\"Game_Label__2qwWx\",\"Buttons\":\"Game_Buttons__hZqgn\",\"Winner\":\"Game_Winner__3msKw\",\"HideRotate\":\"Game_HideRotate__1ZQFU\"};","module.exports = __webpack_public_path__ + \"static/media/fire.a0d39ca3.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Ships\":\"Ships_Ships__12LO7\",\"VerticalShips\":\"Ships_VerticalShips__3sTvK\",\"HideShips\":\"Ships_HideShips__2C2FZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"ComputerGrid_Row__dqX1G\",\"Column\":\"ComputerGrid_Column__2RRpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"HumanGrid_Row__bI5ZN\",\"Column\":\"HumanGrid_Column__3RGyM\",\"ShipGray\":\"HumanGrid_ShipGray__Ap_ZS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Top\":\"App_Top__1EDUa\"};","const Ship = (name) => {\n  let length = 1;\n  switch (name) {\n    case \"Carrier\":\n      length = 5;\n      break;\n    case \"Battleship\":\n      length = 4;\n      break;\n    case \"Destroyer\":\n      length = 3;\n      break;\n    case \"Submarine\":\n      length = 3;\n      break;\n    case \"PatrolBoat\":\n      length = 2;\n      break;\n    default:\n      break;\n  }\n  let damage = Array(length).fill(\"\");\n  let sunk = false;\n  let placed = false;\n\n  const getPlaced = () => placed;\n  const setPlaced = () => {\n    placed = true;\n  } \n  const getName = () => name;\n  const getLength = () => length;\n  const getDamage = () => damage;\n\n  const hit = (position) => {\n    damage[position] = \"x\";\n    return damage;\n  };\n\n  const isSunk = () => {\n    if (!damage.includes(\"\")) {\n      sunk = true;\n    } else {\n      sunk = false;\n    }\n    return sunk;\n  };\n\n  return {\n    damage,\n    sunk,\n    length,\n    placed,\n    getLength,\n    getName,\n    getDamage,\n    hit,\n    isSunk,\n    getPlaced,\n    setPlaced,\n  };\n};\n\nexport default Ship;\n","import Ship from \"./Ship\";\n\nconst Gameboard = () => {\n  let ships = {\n    Carrier: Ship(\"Carrier\"),\n    Battleship: Ship(\"Battleship\"),\n    Destroyer: Ship(\"Destroyer\"),\n    Submarine: Ship(\"Submarine\"),\n    PatrolBoat: Ship(\"PatrolBoat\"),\n  };\n  // Create 10 x 10 grid\n  let grid = [];\n  for (let i = 0; i < 10; i++) {\n    grid.push(Array(10).fill(\"\"));\n  }\n  const getGrid = () => grid;\n\n  // Place ship in grid\n  const placeShip = (shipObj, orientation, row, column) => {\n    if (!row || !column) return false;\n    if (orientation === \"Horizontal\") {\n      for (let i = 0; i < shipObj.length; i++) {\n        // If going to go off board\n        if (column - 1 + i >= 10 || column - 1 + i < 0) {\n          return false;\n        }\n\n        // If going to overlap another ship\n        if (grid[row - 1][column - 1 + i] !== \"\") {\n          return false;\n        }\n      }\n      for (let i = 0; i < shipObj.length; i++) {\n        grid[row - 1][column - 1 + i] = shipObj.getName() + i;\n      }\n      return grid;\n    } else {\n      for (let i = 0; i < shipObj.length; i++) {\n        // If going to go off board\n        if (row - 1 + i >= 10 || row - 1 + i < 0) {\n          return false;\n        }\n\n        // If going to overlap another ship\n        if (grid[row - 1 + i][column - 1] !== \"\") {\n          return false;\n        }\n      }\n      for (let i = 0; i < shipObj.length; i++) {\n        grid[row - 1 + i][column - 1] = shipObj.getName() + i;\n      }\n      return grid;\n    }\n  };\n\n  const autoPlaceShips = () => {\n    for (const ship in ships) {\n      if (!ships[ship].getPlaced()) {\n        let row,\n          column = null;\n        let orientation = Math.random() > 0.5 ? \"Horizontal\" : \"Vertical\";\n        while (!placeShip(ships[ship], orientation, row, column)) {\n          row = Math.floor(Math.random() * 10) + 1;\n          column = Math.floor(Math.random() * 10) + 1;\n        }\n        ships[ship].setPlaced();\n      }\n    }\n  };\n\n  const receiveAttack = (row, column) => {\n    if (grid[row - 1][column - 1] === \"\") {\n      // Set as missed\n      grid[row - 1][column - 1] = \"x\";\n      return true;\n    } else if (\n      grid[row - 1][column - 1] === \"x\" ||\n      grid[row - 1][column - 1] === \"Hit\"\n    ) {\n      // Disallow\n      return false;\n    } else {\n      // Ship hit\n      const content = grid[row - 1][column - 1];\n      const shipName = content.slice(0, content.length - 1);\n      const hitPosition = content[content.length - 1];\n      let ship = Ship(shipName);\n      ship.hit(hitPosition);\n\n      // Mark as hit\n      grid[row - 1][column - 1] = \"Hit\";\n      return true;\n    }\n  };\n\n  const allSunk = () => {\n    let sunk = true;\n    grid.forEach((row) => {\n      row.forEach((column) => {\n        if (column !== \"\" && column !== \"x\" && column !== \"Hit\") {\n          sunk = false;\n        }\n      });\n    });\n    return sunk;\n    // ships.forEach((ship) => {\n    //   if (!ship.isSunk) {\n    //     sunk = false;\n    //   }\n    // })\n    // return sunk;\n  };\n  return {\n    ships,\n    grid,\n    getGrid,\n    placeShip,\n    receiveAttack,\n    allSunk,\n    autoPlaceShips,\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from \"./Gameboard\";\n\nconst Player = (name) => {\n  const getName = () => name;\n  \n  const gameboard = Gameboard();\n\n  const attack = (opposition, row, column) => {\n    return opposition.gameboard.receiveAttack(row, column);\n  }\n\n  const computerAttack = (opposition) => {\n    let row = Math.floor(Math.random() * 10) + 1;\n    let column = Math.floor(Math.random() * 10) + 1;\n    let result = opposition.gameboard.receiveAttack(row, column);\n    while (result === false) {\n      row = Math.floor(Math.random() * 10) + 1;\n      column = Math.floor(Math.random() * 10) + 1;\n      result = opposition.gameboard.receiveAttack(row, column);\n    }\n    return result;\n  }\n  return {\n    getName,\n    attack,\n    gameboard,\n    computerAttack,\n  }\n}\n\n\nexport default Player;\n","import React from \"react\";\nimport classes from \"./ComputerGrid.module.css\";\nimport Fire from \"../../images/fire.png\";\n\nconst computerGrid = (props) => {\n  return props.grid.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex + 1} className={classes.Row}>\n        {row.map((column, colIndex) => {\n          let classList = [classes.Column];\n          let style = null;\n          if (column === \"Hit\") {\n            style = {\n              backgroundColor: \"black\",\n              backgroundImage: `url(${Fire})`,\n              backgroundSize: \"cover\",\n            };\n          }\n          return (\n            <div\n              onClick={(event) => props.clickBoard(event)}\n              row={rowIndex + 1}\n              column={colIndex + 1}\n              key={`${rowIndex} ${colIndex}`}\n              className={classList.join(\" \")}\n              style={style}\n            >\n              {column === \"x\" ? column : null}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n};\n\nexport default computerGrid;\n","import React from \"react\";\nimport classes from \"./HumanGrid.module.css\";\nimport Fire from \"../../images/fire.png\";\n\nconst humanGrid = (props) => {\n  return props.grid.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex + 1} className={classes.Row}>\n        {row.map((column, colIndex) => {\n          let classList = [classes.Column];\n          let style = null;\n          if (column === \"Hit\") {\n            style = {\n              backgroundColor: \"black\",\n              backgroundImage: `url(${Fire})`,\n              backgroundSize: \"cover\",\n            };\n          } else if (column !== \"x\" && column !== \"\") {\n            style = { backgroundColor: \"gray\" };\n          }\n\n          return (\n            <div\n              row={rowIndex + 1}\n              column={colIndex + 1}\n              key={`${rowIndex} ${colIndex}`}\n              className={classList.join(\" \")}\n              style={style}\n              drop=\"droppable\"\n            >\n              {column === \"x\" ? column : null}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n};\n\nexport default humanGrid;\n","import React from \"react\";\nimport classes from \"./Ships.module.css\";\n// import { ItemTypes } from \"./Constants\";\n// import { useDrag } from \"react-dnd\";\n\nconst Ships = (props) => {\n  // const [{ isDragging }, drag] = useDrag({\n  //   item: { type: ItemTypes.SHIP },\n  //   collect: (monitor) => ({\n  //     isDragging: !!monitor.isDragging(),\n  //   }),\n  // });\n\n  const createShips = [];\n  for (const ship in props.ships) {\n    let squares = [];\n    for (let i = 0; i < props.ships[ship].length; i++) {\n      squares.push(\n        <div\n          name={props.ships[ship].getName()}\n          position={i}\n          key={props.ships[ship].getName() + i}\n        ></div>\n      );\n    }\n    createShips.push(\n      <div\n        onMouseDown={(event) => props.dragStart(event)}\n        //draggable=\"true\"\n        key={props.ships[ship].getName()}\n        // ref={drag}\n        // style={{\n        //   opacity: isDragging ? 0.5 : 1,\n        // }}\n      >\n        {squares}\n      </div>\n    );\n  }\n\n  let classList = [];\n  if (props.orientation === \"Vertical\") {\n    classList = [classes.VerticalShips];\n  } else {\n    classList = [classes.Ships];\n  }\n  if (props.currentTurn !== null) {\n    console.log(props.currentTurn)\n    classList.push(classes.HideShips)\n  }\n  return <div className={classList.join(\" \")}>{createShips}</div>;\n};\n\nexport default Ships;\n","import React, { Component } from \"react\";\nimport Player from \"../Factories/Player\";\nimport classes from \"./Game.module.css\";\nimport ComputerGrid from \"./ComputerGrid/ComputerGrid\";\nimport HumanGrid from \"./HumanGrid/HumanGrid\";\nimport Ships from \"./Ships/Ships\";\n\nclass Game extends Component {\n  state = {\n    human: Player(\"Human\"),\n    computer: Player(\"Computer\"),\n    currentTurn: null,\n    orientation: \"Horizontal\",\n    disableRotation: false,\n    startGame: false,\n    counter: 0,\n    disableStartBtn: false,\n    winner: null,\n  };\n\n  // When clicked on a square of the computers board\n  clickBoard = (event) => {\n    // Only Allow when humans turn and ships have been placed\n    if (this.state.currentTurn !== \"Human\") {\n      return;\n    }\n    // Stop clicking on already attacked space\n    if (\n      event.target.textContent === \"x\" ||\n      event.target.style.backgroundColor === \"black\"\n    ) {\n      return;\n    }\n    // Attack computer board\n    let newComputer = this.state.computer;\n    const row = event.target.getAttribute(\"row\");\n    const column = event.target.getAttribute(\"column\");\n    if (this.state.human.attack(newComputer, row, column)) {\n      this.setState({ computer: newComputer, currentTurn: \"Computer\" });\n    }\n    // If all computer ships sunk, declare human winner\n    if (newComputer.gameboard.allSunk()) {\n      this.setState({ winner: \"Human\" });\n    }\n    // Computer attack after 1 second delay\n    setTimeout(() => {\n      let newHuman = this.state.human;\n      this.state.computer.computerAttack(newHuman);\n      this.setState({ human: newHuman, currentTurn: \"Human\" });\n      // If all human ships sunk, declare computer winner\n      if (newHuman.gameboard.allSunk()) {\n        this.setState({ winner: \"Computer\" });\n      }\n    }, 1000);\n  };\n\n  // Change orientation of ships box\n  changeOrientation = () => {\n    // if (this.state.disableRotation === true) {\n    //   return;\n    // }\n    if (this.state.orientation === \"Horizontal\") {\n      this.setState({ orientation: \"Vertical\" });\n    } else {\n      this.setState({ orientation: \"Horizontal\" });\n    }\n  };\n\n  // When pressing start game button\n  startGame = () => {\n    this.setState({\n      currentTurn: \"Human\",\n      disableRotation: true,\n      startGame: false,\n      disableStartBtn: true,\n    });\n    // Auto place computer ships\n    this.state.computer.gameboard.autoPlaceShips();\n    // console.log(\"human grid\", this.state.human.gameboard.getGrid());\n    // console.log(\"computer grid\", this.state.computer.gameboard.getGrid());\n  };\n\n  // When pressing auto place button\n  autoPlace = () => {\n    this.state.human.gameboard.autoPlaceShips();\n\n    // Stop display of draggable ships if auto placed\n    let newHuman = this.state.human;\n    newHuman.gameboard.ships = null;\n    this.setState({ startGame: true, human: newHuman, disableRotation: true });\n  };\n\n  // Handles dragging of a ship\n  handleDragStart = (event) => {\n    const horizontalDrag = () => {\n      // Stop rotation while dragging;\n      this.setState({ disableRotation: true });\n      console.log(event.target);\n      console.log(event.currentTarget);\n      let ship = event.currentTarget;\n\n      // Shift the position of mouse pointer over ship to spot clicked\n      let shiftX = event.clientX - ship.getBoundingClientRect().left;\n      shiftX += 0.005 * window.innerWidth;\n      let shiftY = event.clientY - ship.getBoundingClientRect().top;\n      shiftY += 0.005 * window.innerWidth;\n\n      // Handle move of mouse with ship attached to it\n      let currentDroppable = null;\n      let shipName = event.target.getAttribute(\"name\");\n      let position = Number(event.target.getAttribute(\"position\"));\n      let shipLength = this.state.human.gameboard.ships[shipName].getLength();\n      let finalPosition = {\n        row: null,\n        column: null,\n      };\n      let canDrop = false;\n      let finalElements = [];\n\n      const onMouseMove = (event) => {\n        ship.style.opacity = \"0.7\";\n        ship.style.position = \"absolute\";\n        ship.style.left = event.pageX - shiftX + \"px\";\n        ship.style.top = event.pageY - shiftY + \"px\";\n\n        // Get the element below the ship to know which squares to highlight\n        ship.style.display = \"none\";\n        let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\n        ship.style.display = \"grid\";\n\n        // Stop from being dropped outside window\n        if (!elemBelow) return;\n\n        // Find closest element marked droppable\n        let droppableBelow = elemBelow.closest(\"[drop=droppable]\");\n\n        if (currentDroppable !== droppableBelow) {\n          // Make sure that ship can go in that position\n          if (currentDroppable) {\n            leaveDroppable(currentDroppable);\n          }\n          currentDroppable = droppableBelow;\n          if (currentDroppable) {\n            enterDroppable(currentDroppable);\n          }\n        }\n      };\n      document.addEventListener(\"mousemove\", onMouseMove);\n\n      const leaveDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n        const firstPiece = column - position;\n        // console.log(\"row\", row);\n        // console.log(\"column\", column);\n        // console.log(\"position\", position);\n        // console.log(\"ship name\", shipName);\n        // console.log(\"ship length\", shipLength);\n        // console.log(\"first piece\", firstPiece);\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          elements.push(\n            document.querySelector(\n              `[drop=\"droppable\"][row=\"${row}\"][column=\"${i}\"]`\n            )\n          );\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"#77b4ee\";\n        });\n        canDrop = false;\n      };\n\n      // This happens if the element is droppable on\n      const enterDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n        const firstPiece = column - position;\n        // console.log(\"row\", row);\n        // console.log(\"column\", column);\n        // console.log(\"position\", position);\n        // console.log(\"ship name\", shipName);\n        // console.log(\"ship length\", shipLength);\n        // console.log(\"first piece\", firstPiece);\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          elements.push(\n            document.querySelector(\n              `[drop=\"droppable\"][row=\"${row}\"][column=\"${i}\"]`\n            )\n          );\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        // Change colour on hover\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"lightGray\";\n        });\n\n        // Record where it would be dropped right now\n        canDrop = true;\n        finalElements = elements;\n        finalPosition.row = row;\n        finalPosition.column = firstPiece;\n      };\n\n      // Handle letting go of mouse button\n      const onMouseUp = (event) => {\n        document.removeEventListener(\"mousemove\", onMouseMove);\n        document.removeEventListener(\"mouseup\", onMouseUp);\n        if (canDrop) {\n          let counter = this.state.counter + 1;\n          console.log(\"counter\", counter);\n          this.setState({ disableRotation: false, counter: counter });\n          if (counter === 5) {\n            this.setState({ startGame: true, disableRotation: true });\n          }\n          //console.log(finalPosition.row, finalPosition.column);\n          ship.style.display = \"none\";\n          this.state.human.gameboard.placeShip(\n            this.state.human.gameboard.ships[shipName],\n            this.state.orientation,\n            finalPosition.row,\n            finalPosition.column\n          );\n          console.log(this.state.human.gameboard.getGrid());\n\n          // Set ship as placed\n          let newHuman = this.state.human;\n          newHuman.gameboard.ships[shipName].setPlaced();\n          this.setState({ human: newHuman });\n\n          console.log(finalElements);\n          finalElements.forEach((element) => {\n            element.style.backgroundColor = \"gray\";\n          });\n\n          // If not dropped on board reset to previous position\n        } else {\n          ship.style.position = \"static\";\n          ship.style.opacity = 1;\n          this.setState({ disableRotation: false });\n        }\n        //console.log(this.state.human.gameboard.getGrid())\n        return;\n      };\n\n      document.addEventListener(\"mouseup\", onMouseUp);\n    };\n\n    const verticalDrag = () => {\n      // Stop rotation while dragging;\n      this.setState({ disableRotation: true });\n      // console.log(event.target);\n      // console.log(event.currentTarget);\n      let ship = event.currentTarget;\n\n      console.log(event.clientX);\n      console.log(event.clientY);\n      console.log(ship.getBoundingClientRect());\n      let shiftX = event.clientX - ship.getBoundingClientRect().left;\n      shiftX += 0.005 * window.innerWidth;\n      let shiftY = event.clientY - ship.getBoundingClientRect().top;\n      shiftY += 0.005 * window.innerWidth;\n\n      // Handle move of mouse with ship attached to it\n      let currentDroppable = null;\n      let shipName = event.target.getAttribute(\"name\");\n      let position = Number(event.target.getAttribute(\"position\"));\n      let shipLength = this.state.human.gameboard.ships[shipName].getLength();\n      let finalPosition = {\n        row: null,\n        column: null,\n      };\n      let canDrop = false;\n      let finalElements = [];\n\n      const onMouseMove = (event) => {\n        ship.style.opacity = \"0.5\";\n        ship.style.position = \"absolute\";\n\n        // Actually up and down due to rotation\n        ship.style.left = event.pageX - shiftX + \"px\";\n        ship.style.top = event.pageY - shiftY + \"px\";\n\n        // Get the element below the ship to know which squares to highlight\n        ship.style.display = \"none\";\n        let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\n        ship.style.display = \"grid\";\n\n        // Stop from being dropped outside window\n        if (!elemBelow) return;\n\n        // Find closest element marked droppable\n        let droppableBelow = elemBelow.closest(\"[drop=droppable]\");\n\n        if (currentDroppable !== droppableBelow) {\n          // Make sure that ship can go in that position\n          if (currentDroppable) {\n            leaveDroppable(currentDroppable);\n          }\n          currentDroppable = droppableBelow;\n          if (currentDroppable) {\n            enterDroppable(currentDroppable);\n          }\n        }\n      };\n      document.addEventListener(\"mousemove\", onMouseMove);\n\n      const leaveDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n        const firstPiece = row - position;\n        //  console.log(\"row\", row);\n        //  console.log(\"column\", column);\n        //  console.log(\"position\", position);\n        //  console.log(\"ship name\", shipName);\n        //  console.log(\"ship length\", shipLength);\n        //  console.log(\"first piece\", firstPiece);\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          elements.push(\n            document.querySelector(\n              `[drop=\"droppable\"][row=\"${i}\"][column=\"${column}\"]`\n            )\n          );\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"#77b4ee\";\n        });\n        canDrop = false;\n      };\n\n      // This happens if the element is droppable on\n      const enterDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n        const firstPiece = row - position;\n        //  console.log(\"row\", row);\n        //  console.log(\"column\", column);\n        //  console.log(\"position\", position);\n        //  console.log(\"ship name\", shipName);\n        //  console.log(\"ship length\", shipLength);\n        //  console.log(\"first piece\", firstPiece);\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          elements.push(\n            document.querySelector(\n              `[drop=\"droppable\"][row=\"${i}\"][column=\"${column}\"]`\n            )\n          );\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        // Change colour on hover\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"lightGray\";\n        });\n\n        // Record where it would be dropped right now\n        canDrop = true;\n        finalElements = elements;\n        finalPosition.row = firstPiece;\n        finalPosition.column = column;\n      };\n\n      // Handle letting go of mouse button\n      const onMouseUp = (event) => {\n        document.removeEventListener(\"mousemove\", onMouseMove);\n        document.removeEventListener(\"mouseup\", onMouseUp);\n        if (canDrop) {\n          let counter = this.state.counter + 1;\n          this.setState({ disableRotation: false, counter: counter });\n          if (counter === 5) {\n            this.setState({ startGame: true, disableRotation: true });\n          }\n          // console.log(finalPosition.row, finalPosition.column);\n          ship.style.display = \"none\";\n          this.state.human.gameboard.placeShip(\n            this.state.human.gameboard.ships[shipName],\n            this.state.orientation,\n            finalPosition.row,\n            finalPosition.column\n          );\n          // console.log(finalElements);\n          finalElements.forEach((element) => {\n            element.style.backgroundColor = \"gray\";\n          });\n          // If not dropped on board reset to previous position\n        } else {\n          ship.style.position = \"static\";\n          ship.style.opacity = 1;\n          this.setState({ disableRotation: false });\n        }\n        //console.log(this.state.human.gameboard.getGrid())\n        return;\n      };\n\n      document.addEventListener(\"mouseup\", onMouseUp);\n    };\n\n    if (this.state.orientation === \"Horizontal\") {\n      horizontalDrag();\n    } else {\n      verticalDrag();\n    }\n  };\n\n  render() {\n    let turnIndicator = null;\n\n    if (this.state.startGame) {\n      turnIndicator = (\n        <button onClick={() => this.startGame()}>Start Game</button>\n      );\n    } else if (this.state.currentTurn) {\n      turnIndicator = <button disabled>Go: {this.state.currentTurn}</button>;\n    }\n    // Show or hide winner modal\n    let winnerStyle = null;\n    if (this.state.winner) {\n      winnerStyle = { top: \"0vh\" };\n    }\n    return (\n      <React.Fragment>\n        <div className={classes.Winner} style={winnerStyle}>\n          <div>{this.state.winner} Wins</div>\n          <button onClick={() => window.location.reload()}>Restart</button>\n        </div>\n        <div className={classes.Container}>\n          <div>\n            <Ships\n              dragStart={this.handleDragStart}\n              orientation={this.state.orientation}\n              ships={this.state.human.gameboard.ships}\n              currentTurn={this.state.currentTurn}\n            />\n            <div className={classes.Buttons}>\n              {!this.state.disableRotation ? (\n                <React.Fragment>\n                  <button className={classes.HideRotate} onClick={() => this.changeOrientation()}>\n                    Rotate\n                  </button>\n                  <button onClick={() => this.autoPlace()}>Auto Place</button>\n                </React.Fragment>\n              ) : null}\n            </div>\n          </div>\n          <div>\n            <div className={classes.Label}>Human</div>\n            <div className={classes.Grid}>\n              <HumanGrid grid={this.state.human.gameboard.grid} />\n            </div>\n          </div>\n          <div>\n            <div className={classes.Label}>Computer</div>\n            <div className={classes.Grid}>\n              <ComputerGrid\n                grid={this.state.computer.gameboard.grid}\n                clickBoard={(event) => this.clickBoard(event)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={classes.Turn}>{turnIndicator}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\nimport Game from \"./components/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className={classes.Top}>Battleship</div>\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}