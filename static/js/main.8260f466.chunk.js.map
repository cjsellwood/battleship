{"version":3,"sources":["components/Game.module.css","images/fire.png","components/Ships/Ships.module.css","components/ComputerGrid/ComputerGrid.module.css","components/HumanGrid/HumanGrid.module.css","components/ControlButtons/ControlButtons.module.css","App.module.css","components/WinnerModal/WinnerModal.module.css","components/TurnIndicator/TurnIndicator.module.css","Factories/Ship.js","Factories/Gameboard.js","Factories/Player.js","components/ComputerGrid/ComputerGrid.js","components/HumanGrid/HumanGrid.js","components/Ships/Ships.js","components/WinnerModal/WinnerModal.js","components/ControlButtons/ControlButtons.js","components/TurnIndicator/TurnIndicator.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Ship","name","length","placed","getLength","getName","getPlaced","setPlaced","Gameboard","ships","Carrier","Battleship","Destroyer","Submarine","PatrolBoat","grid","i","push","Array","fill","placeShip","shipObj","orientation","row","column","getGrid","receiveAttack","space","allSunk","sunk","forEach","autoPlaceShips","ship","Math","random","floor","Player","gameboard","hits","adjacentAttack","opposition","lastAttack","newAttack","console","log","result","lastHit","sequentialAttack","secondLast","randomAttack","attack","computerAttack","computerGrid","props","map","rowIndex","key","className","classes","Row","colIndex","classList","Column","style","backgroundColor","backgroundImage","Fire","backgroundSize","onClick","event","clickBoard","join","humanGrid","drop","Ships","createShips","squares","position","onMouseDown","dragStart","VerticalShips","currentTurn","HideShips","winnerModal","winnerStyle","winner","top","Winner","window","location","reload","controlButtons","buttons","disableRotation","Fragment","HideRotate","changeOrientation","autoPlace","Buttons","turnIndicator","startGame","startGameHandler","disabled","Turn","Game","state","human","computer","counter","disableStartBtn","target","textContent","newComputer","getAttribute","setState","setTimeout","newHuman","handleDragStart","currentTarget","shiftX","clientX","getBoundingClientRect","left","innerWidth","shiftY","clientY","currentDroppable","shipName","Number","shipLength","finalPosition","canDrop","finalElements","onMouseMove","opacity","pageX","pageY","display","elemBelow","document","elementFromPoint","droppableBelow","closest","leaveDroppable","enterDroppable","addEventListener","elem","firstPiece","elements","querySelector","exit","element","onMouseUp","removeEventListener","dragControl","WinnerModal","this","Container","ControlButtons","Label","Grid","HumanGrid","ComputerGrid","TurnIndicator","Component","App","Top","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8260f466.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Game_Container__sKSbT\",\"Grid\":\"Game_Grid__Ya4sG\",\"Label\":\"Game_Label__2qwWx\",\"Turn\":\"Game_Turn__36u0M\",\"Buttons\":\"Game_Buttons__hZqgn\",\"HideRotate\":\"Game_HideRotate__1ZQFU\"};","module.exports = __webpack_public_path__ + \"static/media/fire.a2c3772d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Ships\":\"Ships_Ships__12LO7\",\"VerticalShips\":\"Ships_VerticalShips__3sTvK\",\"HideShips\":\"Ships_HideShips__2C2FZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"ComputerGrid_Row__dqX1G\",\"Column\":\"ComputerGrid_Column__2RRpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"HumanGrid_Row__bI5ZN\",\"Column\":\"HumanGrid_Column__3RGyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Buttons\":\"ControlButtons_Buttons__2Fdgb\",\"HideRotate\":\"ControlButtons_HideRotate__3q_Qm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Top\":\"App_Top__1EDUa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Winner\":\"WinnerModal_Winner__2zqyV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Turn\":\"TurnIndicator_Turn__-5G63\"};","const Ship = (name) => {\n  let length = 1;\n  switch (name) {\n    case \"Carrier\":\n      length = 5;\n      break;\n    case \"Battleship\":\n      length = 4;\n      break;\n    case \"Destroyer\":\n      length = 3;\n      break;\n    case \"Submarine\":\n      length = 3;\n      break;\n    case \"PatrolBoat\":\n      length = 2;\n      break;\n    default:\n      break;\n  }\n  let placed = false;\n\n  const getPlaced = () => placed;\n  const setPlaced = () => {\n    placed = true;\n  };\n  const getName = () => name;\n  const getLength = () => length;\n\n  return {\n    getLength,\n    getName,\n    getPlaced,\n    setPlaced,\n  };\n};\n\nexport default Ship;\n","import Ship from \"./Ship\";\n\nconst Gameboard = () => {\n  // List of ships to add to gameboard\n  let ships = {\n    Carrier: Ship(\"Carrier\"),\n    Battleship: Ship(\"Battleship\"),\n    Destroyer: Ship(\"Destroyer\"),\n    Submarine: Ship(\"Submarine\"),\n    PatrolBoat: Ship(\"PatrolBoat\"),\n  };\n  // Create 10 x 10 grid\n  let grid = [];\n  for (let i = 0; i < 10; i++) {\n    grid.push(Array(10).fill(\"\"));\n  }\n  const getGrid = () => grid;\n\n  // Place ship in grid\n  const placeShip = (shipObj, orientation, row, column) => {\n    if (!row || !column) return false;\n    if (orientation === \"Horizontal\") {\n      for (let i = 0; i < shipObj.getLength(); i++) {\n        // If going to go off board\n        if (column - 1 + i >= 10 || column - 1 + i < 0) {\n          return false;\n        }\n\n        // If going to overlap another ship\n        if (grid[row - 1][column - 1 + i] !== \"\") {\n          return false;\n        }\n      }\n      // Place ship\n      for (let i = 0; i < shipObj.getLength(); i++) {\n        grid[row - 1][column - 1 + i] = shipObj.getName() + i;\n      }\n      return grid;\n    } else {\n      for (let i = 0; i < shipObj.getLength(); i++) {\n        // If going to go off board\n        if (row - 1 + i >= 10 || row - 1 + i < 0) {\n          return false;\n        }\n\n        // If going to overlap another ship\n        if (grid[row - 1 + i][column - 1] !== \"\") {\n          return false;\n        }\n      }\n      // Place ship\n      for (let i = 0; i < shipObj.getLength(); i++) {\n        grid[row - 1 + i][column - 1] = shipObj.getName() + i;\n      }\n      return grid;\n    }\n  };\n\n  // Place ships in random positions\n  const autoPlaceShips = () => {\n    for (const ship in ships) {\n      // Only place if not already placed\n      if (!ships[ship].getPlaced()) {\n        let row = null;\n        let column = null;\n        let orientation = Math.random() > 0.5 ? \"Horizontal\" : \"Vertical\";\n\n        // Ensure that space is available for ship to be placed\n        while (!placeShip(ships[ship], orientation, row, column)) {\n          row = Math.floor(Math.random() * 10) + 1;\n          column = Math.floor(Math.random() * 10) + 1;\n        }\n        ships[ship].setPlaced();\n      }\n    }\n  };\n\n  // Attack the board\n  const receiveAttack = (row, column) => {\n    let space = grid[row - 1][column - 1];\n    // Set as missed\n    if (space === \"\") {\n      grid[row - 1][column - 1] = \"x\";\n      return \"x\";\n\n      // Don't allow if already attacked\n    } else if (space === \"x\" || space === \"Hit\") {\n      return false;\n      // If a ship hit\n    } else {\n      grid[row - 1][column - 1] = \"Hit\";\n      return \"Hit\";\n    }\n  };\n\n  // Check if all ships are sunk\n  const allSunk = () => {\n    let sunk = true;\n    grid.forEach((row) => {\n      row.forEach((column) => {\n        if (column !== \"\" && column !== \"x\" && column !== \"Hit\") {\n          sunk = false;\n        }\n      });\n    });\n    return sunk;\n  };\n  return {\n    ships,\n    getGrid,\n    placeShip,\n    receiveAttack,\n    allSunk,\n    autoPlaceShips,\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from \"./Gameboard\";\n\nconst Player = (name) => {\n  const gameboard = Gameboard();\n\n  // Attack the oppositions gameboard\n  const attack = (opposition, row, column) => {\n    return opposition.gameboard.receiveAttack(row, column);\n  };\n\n  const hits = [];\n\n  // Computer attacks the humans board\n  const computerAttack = (opposition) => {\n    // Random first attack\n    if (hits.length === 0) {\n      randomAttack(opposition);\n\n      // Second attack is either adjacent or random\n    } else if (hits.length === 1) {\n      let lastAttack = hits[hits.length - 1];\n      if (lastAttack.result === \"Hit\") {\n        // If can't find available adjacent do random attack\n        if (!adjacentAttack(opposition, lastAttack)) {\n          randomAttack(opposition);\n          return;\n        }\n      } else {\n        randomAttack(opposition);\n      }\n      // Attack next spot in pattern if two hits consecutively\n    } else {\n      let lastAttack = hits[hits.length - 1];\n      let secondLast = hits[hits.length - 2];\n      if (lastAttack.result === \"Hit\" && secondLast.result === \"Hit\") {\n        // If no pattern found do random attack\n        if (!sequentialAttack(opposition, lastAttack, secondLast)) {\n          randomAttack(opposition);\n          return;\n        }\n      } else {\n        if (lastAttack.result === \"Hit\") {\n          // If can't find available adjacent do random attack\n          if (!adjacentAttack(opposition, lastAttack)) {\n            randomAttack(opposition);\n            return;\n          }\n        } else {\n          randomAttack(opposition);\n        }\n      }\n    }\n    return hits[hits.length - 1].result;\n  };\n\n  // Randomly choose adjacent square to last hit\n  const adjacentAttack = (opposition, lastAttack) => {\n    let newAttack = Math.random();\n    let row = -1;\n    let column = -1;\n    // Ensure that hits will be inside board\n    console.log(row, column);\n    while (row < 1 || row > 10 || column < 1 || column > 10) {\n      newAttack = Math.random();\n      row = lastAttack.row;\n      column = lastAttack.column;\n      if (newAttack < 0.25) {\n        row -= 1;\n      } else if (newAttack < 0.5) {\n        row += 1;\n      } else if (newAttack < 0.75) {\n        column -= 1;\n      } else {\n        column += 1;\n      }\n    }\n\n    let result = opposition.gameboard.receiveAttack(row, column);\n    let i = 0;\n    while (result === false) {\n      row = -1;\n      column = -1;\n      while (row < 1 || row > 10 || column < 1 || column > 10) {\n        newAttack = Math.random();\n        row = lastAttack.row;\n        column = lastAttack.column;\n        if (newAttack < 0.25) {\n          row -= 1;\n        } else if (newAttack < 0.5) {\n          row += 1;\n        } else if (newAttack < 0.75) {\n          column -= 1;\n        } else {\n          column += 1;\n        }\n      }\n      result = opposition.gameboard.receiveAttack(row, column);\n\n      i += 1;\n      // Return if empty adjacent space not found\n      if (i === 100) {\n        return false;\n      }\n    }\n\n    // Record hit\n    let lastHit = {\n      row,\n      column,\n      result,\n    };\n    hits.push(lastHit);\n    return result;\n  };\n\n  // If 2 hits in a row continue pattern\n  const sequentialAttack = (opposition, lastAttack, secondLast) => {\n    let row,\n      column = null;\n\n    // If two in a row horizontally\n    if (lastAttack.row === secondLast.row) {\n      row = lastAttack.row;\n      if (lastAttack.column > secondLast.column) {\n        column = lastAttack.column + 1;\n      } else {\n        column = lastAttack.column - 1;\n      }\n      // If two in a row vertically\n    } else if (lastAttack.column === secondLast.column) {\n      column = lastAttack.column;\n      if (lastAttack.row > secondLast.row) {\n        row = lastAttack.row + 1;\n      } else {\n        row = lastAttack.row - 1;\n      }\n      // If not either return\n    } else {\n      return false;\n    }\n    // If outside bounds return\n    if (row > 10 || row < 1 || column > 10 || column < 1) {\n      return false;\n    }\n\n    let result = opposition.gameboard.receiveAttack(row, column);\n\n    // Record hit\n    let lastHit = {\n      row,\n      column,\n      result,\n    };\n    hits.push(lastHit);\n    return result;\n  };\n\n  // Randomly attack board\n  const randomAttack = (opposition) => {\n    let row = Math.floor(Math.random() * 10) + 1;\n    let column = Math.floor(Math.random() * 10) + 1;\n    let result = opposition.gameboard.receiveAttack(row, column);\n\n    // Ensure that hits available space\n    while (result === false) {\n      row = Math.floor(Math.random() * 10) + 1;\n      column = Math.floor(Math.random() * 10) + 1;\n      result = opposition.gameboard.receiveAttack(row, column);\n    }\n\n    // Record hit\n    let lastHit = {\n      row,\n      column,\n      result,\n    };\n    hits.push(lastHit);\n    return result;\n  };\n\n  return {\n    attack,\n    gameboard,\n    computerAttack,\n  };\n};\n\nexport default Player;\n","import React from \"react\";\nimport classes from \"./ComputerGrid.module.css\";\nimport Fire from \"../../images/fire.png\";\n\nconst computerGrid = (props) => {\n  return props.grid.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex + 1} className={classes.Row}>\n        {row.map((column, colIndex) => {\n          let classList = [classes.Column];\n          let style = null;\n          // If ship hit display fire image\n          if (column === \"Hit\") {\n            style = {\n              backgroundColor: \"black\",\n              backgroundImage: `url(${Fire})`,\n              backgroundSize: \"cover\",\n            };\n          }\n          return (\n            <div\n              onClick={(event) => props.clickBoard(event)}\n              row={rowIndex + 1}\n              column={colIndex + 1}\n              key={`${rowIndex} ${colIndex}`}\n              className={classList.join(\" \")}\n              style={style}\n            >\n              {column === \"x\" ? column : null}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n};\n\nexport default computerGrid;\n","import React from \"react\";\nimport classes from \"./HumanGrid.module.css\";\nimport Fire from \"../../images/fire.png\";\n\nconst humanGrid = (props) => {\n  return props.grid.map((row, rowIndex) => {\n    return (\n      <div key={rowIndex + 1} className={classes.Row}>\n        {row.map((column, colIndex) => {\n          let classList = [classes.Column];\n          let style = null;\n          // If ship hit display fire image\n          if (column === \"Hit\") {\n            style = {\n              backgroundColor: \"black\",\n              backgroundImage: `url(${Fire})`,\n              backgroundSize: \"cover\",\n            };\n          // If ship, display gray box\n          } else if (column !== \"x\" && column !== \"\") {\n            style = { backgroundColor: \"gray\" };\n          }\n\n          return (\n            <div\n              row={rowIndex + 1}\n              column={colIndex + 1}\n              key={`${rowIndex} ${colIndex}`}\n              className={classList.join(\" \")}\n              style={style}\n              drop=\"droppable\"\n            >\n              {column === \"x\" ? column : null}\n            </div>\n          );\n        })}\n      </div>\n    );\n  });\n};\n\nexport default humanGrid;\n","import React from \"react\";\nimport classes from \"./Ships.module.css\";\n\nconst Ships = (props) => {\n  const createShips = [];\n  for (const ship in props.ships) {\n    let squares = [];\n    for (let i = 0; i < props.ships[ship].getLength(); i++) {\n      squares.push(\n        <div\n          name={props.ships[ship].getName()}\n          position={i}\n          key={props.ships[ship].getName() + i}\n        ></div>\n      );\n    }\n    createShips.push(\n      <div\n        onMouseDown={(event) => props.dragStart(event)}\n        key={props.ships[ship].getName()}\n      >\n        {squares}\n      </div>\n    );\n  }\n\n  // Change orientation of ships by changing classes\n  let classList = [];\n  if (props.orientation === \"Vertical\") {\n    classList = [classes.VerticalShips];\n  } else {\n    classList = [classes.Ships];\n  }\n\n  // Hide ships if on mobile\n  if (props.currentTurn !== null) {\n    classList.push(classes.HideShips);\n  }\n  return <div className={classList.join(\" \")}>{createShips}</div>;\n};\n\nexport default Ships;\n","import React from \"react\";\nimport classes from \"./WinnerModal.module.css\";\n\nconst winnerModal = (props) => {\n  // Show or hide winner modal\n  let winnerStyle = null;\n  if (props.winner) {\n    winnerStyle = { top: \"0vh\" };\n  }\n\n  return (\n    <div className={classes.Winner} style={winnerStyle}>\n      <div>{props.winner} Wins</div>\n      <button onClick={() => window.location.reload()}>Restart</button>\n    </div>\n  );\n};\n\nexport default winnerModal;\n","import React from \"react\";\nimport classes from \"./ControlButtons.module.css\";\n\nconst controlButtons = (props) => {\n  let buttons = null;\n  if (!props.disableRotation) {\n    buttons = (\n      <React.Fragment>\n        <button\n          className={classes.HideRotate}\n          onClick={props.changeOrientation}\n        >\n          Rotate\n        </button>\n        <button onClick={props.autoPlace}>Auto Place</button>\n      </React.Fragment>\n    );\n  }\n\n  return <div className={classes.Buttons}>{buttons}</div>;\n};\n\nexport default controlButtons;\n","import React from \"react\";\nimport classes from \"./TurnIndicator.module.css\";\n\nconst turnIndicator = (props) => {\n  // Turn indicator dependant on start of game\n  let turnIndicator = null;\n  if (props.startGame) {\n    turnIndicator = (\n      <button onClick={props.startGameHandler}>Start Game</button>\n    );\n  } else if (props.currentTurn) {\n    turnIndicator = <button disabled>Go: {props.currentTurn}</button>;\n  }\n\n  return <div className={classes.Turn}>{turnIndicator}</div>;\n};\n\nexport default turnIndicator;\n","import React, { Component } from \"react\";\nimport Player from \"../Factories/Player\";\nimport classes from \"./Game.module.css\";\nimport ComputerGrid from \"./ComputerGrid/ComputerGrid\";\nimport HumanGrid from \"./HumanGrid/HumanGrid\";\nimport Ships from \"./Ships/Ships\";\nimport WinnerModal from \"./WinnerModal/WinnerModal\";\nimport ControlButtons from \"./ControlButtons/ControlButtons\";\nimport TurnIndicator from \"./TurnIndicator/TurnIndicator\";\n\nclass Game extends Component {\n  state = {\n    human: Player(\"Human\"),\n    computer: Player(\"Computer\"),\n    currentTurn: null,\n    orientation: \"Horizontal\",\n    disableRotation: false,\n    startGame: false,\n    counter: 0,\n    disableStartBtn: false,\n    winner: null,\n  };\n\n  // When clicked on a square of the computers board\n  clickBoard = (event) => {\n    // Only Allow when humans turn and ships have been placed\n    if (this.state.currentTurn !== \"Human\") {\n      return;\n    }\n    // Stop clicking on already attacked space\n    if (\n      event.target.textContent === \"x\" ||\n      event.target.style.backgroundColor === \"black\"\n    ) {\n      return;\n    }\n    // Attack computer board\n    let newComputer = this.state.computer;\n    const row = event.target.getAttribute(\"row\");\n    const column = event.target.getAttribute(\"column\");\n    if (this.state.human.attack(newComputer, row, column)) {\n      this.setState({ computer: newComputer, currentTurn: \"Computer\" });\n    }\n    // If all computer ships sunk, declare human winner\n    if (newComputer.gameboard.allSunk()) {\n      this.setState({ winner: \"Human\" });\n      return;\n    }\n    // Computer attack after 1 second delay\n    setTimeout(() => {\n      let newHuman = this.state.human;\n      this.state.computer.computerAttack(newHuman);\n      this.setState({ human: newHuman, currentTurn: \"Human\" });\n      // If all human ships sunk, declare computer winner\n      if (newHuman.gameboard.allSunk()) {\n        this.setState({ winner: \"Computer\" });\n      }\n    }, 1000);\n  };\n\n  // Change orientation of ships box\n  changeOrientation = () => {\n    if (this.state.orientation === \"Horizontal\") {\n      this.setState({ orientation: \"Vertical\" });\n    } else {\n      this.setState({ orientation: \"Horizontal\" });\n    }\n  };\n\n  // When pressing start game button\n  startGameHandler = () => {\n    this.setState({\n      currentTurn: \"Human\",\n      disableRotation: true,\n      startGame: false,\n      disableStartBtn: true,\n    });\n    // Auto place computer ships\n    this.state.computer.gameboard.autoPlaceShips();\n  };\n\n  // When pressing auto place button\n  autoPlace = () => {\n    this.state.human.gameboard.autoPlaceShips();\n\n    // Stop display of draggable ships if auto placed\n    let newHuman = this.state.human;\n    newHuman.gameboard.ships = null;\n    this.setState({ startGame: true, human: newHuman, disableRotation: true });\n  };\n\n  // Handles dragging of a ship\n  handleDragStart = (event) => {\n    const dragControl = () => {\n      // Stop rotation while dragging;\n      this.setState({ disableRotation: true });\n      let ship = event.currentTarget;\n\n      // Shift the position of mouse pointer over ship to spot clicked\n      let shiftX = event.clientX - ship.getBoundingClientRect().left;\n      shiftX += 0.005 * window.innerWidth;\n      let shiftY = event.clientY - ship.getBoundingClientRect().top;\n      shiftY += 0.005 * window.innerWidth;\n\n      let currentDroppable = null;\n      let shipName = event.target.getAttribute(\"name\");\n      let position = Number(event.target.getAttribute(\"position\"));\n      let shipLength = this.state.human.gameboard.ships[shipName].getLength();\n      let finalPosition = {\n        row: null,\n        column: null,\n      };\n      let canDrop = false;\n      let finalElements = [];\n\n      // Handle move of mouse with ship attached to it\n      const onMouseMove = (event) => {\n        ship.style.opacity = \"0.6\";\n        ship.style.position = \"absolute\";\n\n        // Shift position of ship on page with mouse movement\n        ship.style.left = event.pageX - shiftX + \"px\";\n        ship.style.top = event.pageY - shiftY + \"px\";\n\n        // Get the element below the ship to know which squares to highlight\n        ship.style.display = \"none\";\n        let elemBelow = document.elementFromPoint(event.clientX, event.clientY);\n        ship.style.display = \"grid\";\n\n        // Stop from being dropped outside window\n        if (!elemBelow) return;\n\n        // Find closest element marked droppable\n        let droppableBelow = elemBelow.closest(\"[drop=droppable]\");\n\n        if (currentDroppable !== droppableBelow) {\n          // Make sure that ship can go in that position\n          if (currentDroppable) {\n            leaveDroppable(currentDroppable);\n          }\n          currentDroppable = droppableBelow;\n          if (currentDroppable) {\n            enterDroppable(currentDroppable);\n          }\n        }\n      };\n      document.addEventListener(\"mousemove\", onMouseMove);\n\n      const leaveDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n\n        // Get the position of the first part of ship depending on orientation\n        let firstPiece = null;\n        if (this.state.orientation === \"Horizontal\") {\n          firstPiece = column - position;\n        } else {\n          firstPiece = row - position;\n        }\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          if (this.state.orientation === \"Horizontal\") {\n            elements.push(\n              document.querySelector(\n                `[drop=\"droppable\"][row=\"${row}\"][column=\"${i}\"]`\n              )\n            );\n          } else {\n            elements.push(\n              document.querySelector(\n                `[drop=\"droppable\"][row=\"${i}\"][column=\"${column}\"]`\n              )\n            );\n          }\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"#77b4ee\";\n        });\n        canDrop = false;\n      };\n\n      // This happens if the element is droppable on\n      const enterDroppable = (elem) => {\n        const row = Number(elem.getAttribute(\"row\"));\n        const column = Number(elem.getAttribute(\"column\"));\n\n        // Get the position of the first part of ship depending on orientation\n        let firstPiece = null;\n        if (this.state.orientation === \"Horizontal\") {\n          firstPiece = column - position;\n        } else {\n          firstPiece = row - position;\n        }\n\n        // If ship extends over left or right side of board\n        if (firstPiece <= 0 || firstPiece + shipLength - 2 >= 10) {\n          return;\n        }\n\n        // Get list of elements that will be replaced with ship\n        const elements = [];\n        for (let i = firstPiece; i < firstPiece + shipLength; i++) {\n          if (this.state.orientation === \"Horizontal\") {\n            elements.push(\n              document.querySelector(\n                `[drop=\"droppable\"][row=\"${row}\"][column=\"${i}\"]`\n              )\n            );\n          } else {\n            elements.push(\n              document.querySelector(\n                `[drop=\"droppable\"][row=\"${i}\"][column=\"${column}\"]`\n              )\n            );\n          }\n        }\n\n        // If over a ship return\n        let exit = false;\n        elements.forEach((element) => {\n          if (element.style.backgroundColor === \"gray\") {\n            exit = true;\n          }\n        });\n        if (exit) return;\n\n        // Change colour on hover\n        elements.forEach((element) => {\n          element.style.backgroundColor = \"lightGray\";\n        });\n\n        // Record where it would be dropped right now\n        canDrop = true;\n        finalElements = elements;\n        if (this.state.orientation === \"Horizontal\") {\n          finalPosition.row = row;\n          finalPosition.column = firstPiece;\n        } else {\n          finalPosition.row = firstPiece;\n          finalPosition.column = column;\n        }\n      };\n\n      // Handle letting go of mouse button\n      const onMouseUp = (event) => {\n        document.removeEventListener(\"mousemove\", onMouseMove);\n        document.removeEventListener(\"mouseup\", onMouseUp);\n\n        // If able to be dropped\n        if (canDrop) {\n          // Keep track of number of ships placed\n          let counter = this.state.counter + 1;\n          this.setState({ disableRotation: false, counter: counter });\n\n          // If counter is 5 display start game button\n          if (counter === 5) {\n            this.setState({ startGame: true, disableRotation: true });\n          }\n\n          // Add ship to board\n          ship.style.display = \"none\";\n          this.state.human.gameboard.placeShip(\n            this.state.human.gameboard.ships[shipName],\n            this.state.orientation,\n            finalPosition.row,\n            finalPosition.column\n          );\n\n          // Set ship as placed to avoid duplicates in auto place\n          let newHuman = this.state.human;\n          newHuman.gameboard.ships[shipName].setPlaced();\n          this.setState({ human: newHuman });\n\n          finalElements.forEach((element) => {\n            element.style.backgroundColor = \"gray\";\n          });\n\n          // If not dropped on board reset to previous position\n        } else {\n          ship.style.position = \"static\";\n          ship.style.opacity = 1;\n          this.setState({ disableRotation: false });\n        }\n      };\n\n      document.addEventListener(\"mouseup\", onMouseUp);\n    };\n\n    // Run drag function\n    dragControl();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <WinnerModal winner={this.state.winner} />\n        <div className={classes.Container}>\n          <div>\n            <Ships\n              dragStart={this.handleDragStart}\n              orientation={this.state.orientation}\n              ships={this.state.human.gameboard.ships}\n              currentTurn={this.state.currentTurn}\n            />\n            <ControlButtons\n              disableRotation={this.state.disableRotation}\n              changeOrientation={this.changeOrientation}\n              autoPlace={this.autoPlace}\n            />\n          </div>\n          <div>\n            <div className={classes.Label}>Human</div>\n            <div className={classes.Grid}>\n              <HumanGrid grid={this.state.human.gameboard.getGrid()} />\n            </div>\n          </div>\n          <div>\n            <div className={classes.Label}>Computer</div>\n            <div className={classes.Grid}>\n              <ComputerGrid\n                grid={this.state.computer.gameboard.getGrid()}\n                clickBoard={(event) => this.clickBoard(event)}\n              />\n            </div>\n          </div>\n        </div>\n        <TurnIndicator\n          startGame={this.state.startGame}\n          startGameHandler={this.startGameHandler}\n          currentTurn={this.state.currentTurn}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\nimport Game from \"./components/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className={classes.Top}>Battleship</div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}